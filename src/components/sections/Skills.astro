---
import { getLangFromUrl, useTranslations } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const skillLevels: Record<string, number> = {
  [t('skills.level.expert')]: 95,
  [t('skills.level.advanced')]: 85,
  [t('skills.level.intermediate')]: 65,
  [t('skills.level.beginner')]: 40,
  [t('skills.level.native')]: 100,
};

const skills = {
  backend: [
    { name: 'PHP', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'Laravel', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'Python', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'FastAPI', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'API Development', level: t('skills.level.advanced'), percentage: 85 }
  ],
  frontend: [
    { name: 'JavaScript', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'Next.js', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'Livewire', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'AlpineJS', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'Tailwind CSS', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'HTML5', level: t('skills.level.expert'), percentage: 95 },
    { name: 'CSS3', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'jQuery', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'Bootstrap', level: t('skills.level.intermediate'), percentage: 65 }
  ],
  databases: [
    { name: 'PostgreSQL', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'MySQL', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'pgvector', level: t('skills.level.intermediate'), percentage: 65 }
  ],
  tools: [
    { name: 'Git', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'GitHub', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'Docker', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'Linux (Ubuntu)', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'VirtualBox', level: t('skills.level.intermediate'), percentage: 65 }
  ],
  other: [
    { name: 'JIRA', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'Confluence', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'VS Code', level: t('skills.level.advanced'), percentage: 85 },
    { name: 'PHPStorm', level: t('skills.level.intermediate'), percentage: 65 }
  ],
  languages: [
    { name: 'Español', level: t('skills.level.native'), percentage: 100 },
    { name: 'Alemán', level: t('skills.level.intermediate'), percentage: 65 },
    { name: 'Inglés', level: t('skills.level.beginner'), percentage: 40 }
  ]
};

const categories = [
  { key: 'backend', title: t('skills.backend'), skills: skills.backend },
  { key: 'frontend', title: t('skills.frontend'), skills: skills.frontend },
  { key: 'databases', title: t('skills.databases'), skills: skills.databases },
  { key: 'tools', title: t('skills.tools'), skills: skills.tools },
  { key: 'other', title: t('skills.other'), skills: skills.other },
  { key: 'languages', title: t('skills.languages'), skills: skills.languages }
];
---

<section id="skills" class="py-20 px-4">
  <div class="container mx-auto max-w-6xl">
    <h2 class="text-4xl md:text-5xl font-bold text-center mb-12">
      {t('skills.title')}
    </h2>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {categories.map(category => (
        <div class="bg-secondary/5 border border-secondary/10 rounded-lg p-6 hover:border-[var(--color-primary)] transition-all duration-300 hover:shadow-lg group">
          <h3 class="text-2xl font-bold mb-6 text-[var(--color-primary)] group-hover:scale-105 transition-transform duration-300">{category.title}</h3>
          <div class="space-y-5">
            {category.skills.map(skill => (
              <div class="skill-item">
                <div class="flex justify-between items-center mb-2">
                  <span class="font-medium text-sm">{skill.name}</span>
                  <span class="text-xs text-[var(--text-secondary)] px-2 py-1 bg-secondary/10 rounded font-medium">
                    {skill.level}
                  </span>
                </div>
                <div class="relative h-2 bg-secondary/20 rounded-full overflow-hidden">
                  <div 
                    class="absolute top-0 left-0 h-full bg-gradient-to-r from-[var(--color-primary)] to-orange-500 rounded-full transition-all duration-1000 ease-out skill-bar"
                    data-percentage={skill.percentage}
                    style="width: 0%"
                  ></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  // Animate skill bars when they come into view
  const observerOptions = {
    threshold: 0.2,
    rootMargin: '0px 0px -100px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const skillBars = entry.target.querySelectorAll('.skill-bar');
        skillBars.forEach((bar, index) => {
          setTimeout(() => {
            const percentage = bar.getAttribute('data-percentage');
            (bar as HTMLElement).style.width = `${percentage}%`;
          }, index * 100);
        });
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  const skillsSection = document.getElementById('skills');
  if (skillsSection) {
    observer.observe(skillsSection);
  }
</script>
