---
import { languages, getLangFromUrl, getLocalizedPath } from '../i18n/utils';

const currentLang = getLangFromUrl(Astro.url);
let currentPath = Astro.url.pathname.replace(/^\/(en|es|de)/, '') || '/';

// If we're in a blog post, redirect to the blog index instead
if (currentPath.startsWith('/blog/') && currentPath !== '/blog' && currentPath !== '/blog/') {
  currentPath = '/blog';
}
---

<div class="relative inline-block text-left">
  <button
    id="language-selector"
    type="button"
    class="inline-flex items-center justify-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-secondary/20 transition-colors duration-200"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="uppercase">{currentLang}</span>
    <svg
      class="w-4 h-4 ml-1"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <div
    id="language-menu"
    class="hidden absolute right-0 mt-2 w-32 origin-top-right rounded-lg shadow-lg bg-[var(--bg-primary)] border border-secondary/20 focus:outline-none z-50"
    role="menu"
    aria-orientation="vertical"
  >
    <div class="py-1" role="none">
      {Object.entries(languages).map(([lang, label]) => (
        <a
          href={getLocalizedPath(currentPath, lang)}
          class={`block px-4 py-2 text-sm hover:bg-secondary/20 transition-colors ${
            lang === currentLang ? 'text-[var(--color-primary)] font-semibold' : ''
          }`}
          role="menuitem"
        >
          {label}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  const languageSelector = document.getElementById('language-selector');
  const languageMenu = document.getElementById('language-menu');

  languageSelector?.addEventListener('click', () => {
    const isHidden = languageMenu?.classList.contains('hidden');
    if (isHidden) {
      languageMenu?.classList.remove('hidden');
      languageSelector?.setAttribute('aria-expanded', 'true');
    } else {
      languageMenu?.classList.add('hidden');
      languageSelector?.setAttribute('aria-expanded', 'false');
    }
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    if (!languageSelector?.contains(target) && !languageMenu?.contains(target)) {
      languageMenu?.classList.add('hidden');
      languageSelector?.setAttribute('aria-expanded', 'false');
    }
  });
</script>
