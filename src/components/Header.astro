---
import ThemeToggle from './ThemeToggle.astro';
import LanguageSelector from './LanguageSelector.astro';
import { getLangFromUrl, useTranslations, getLocalizedPath } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<header class="fixed top-0 left-0 right-0 z-50 bg-[var(--bg-primary)]/80 backdrop-blur-md border-b border-secondary/10">
  <nav class="container mx-auto px-4 py-4">
    <div class="flex items-center justify-between">
      <!-- Logo/Name -->
      <a
        href={getLocalizedPath('/', lang)}
        class="text-xl font-bold hover:text-[var(--color-primary)] transition-colors duration-200"
      >
        CQG
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        <a href={`${getLocalizedPath('/', lang)}#about`} class="hover:text-[var(--color-primary)] transition-colors duration-200">
          {t('nav.about')}
        </a>
        <a href={`${getLocalizedPath('/', lang)}#projects`} class="hover:text-[var(--color-primary)] transition-colors duration-200">
          {t('nav.projects')}
        </a>
        <a href={`${getLocalizedPath('/', lang)}#experience`} class="hover:text-[var(--color-primary)] transition-colors duration-200">
          {t('nav.experience')}
        </a>
        <a href={`${getLocalizedPath('/', lang)}#skills`} class="hover:text-[var(--color-primary)] transition-colors duration-200">
          {t('nav.skills')}
        </a>
        <a href={getLocalizedPath('/blog', lang)} class="hover:text-[var(--color-primary)] transition-colors duration-200">
          {t('nav.blog')}
        </a>
        <a href={`${getLocalizedPath('/', lang)}#contact`} class="hover:text-[var(--color-primary)] transition-colors duration-200">
          {t('nav.contact')}
        </a>
      </div>

      <!-- Right side: Language selector and Theme toggle -->
      <div class="flex items-center space-x-2">
        <LanguageSelector />
        <ThemeToggle ariaLabel={t('theme.toggle')} />
        
        <!-- Mobile menu button -->
        <button
          id="mobile-menu-button"
          type="button"
          class="md:hidden p-2 rounded-lg hover:bg-secondary/20 transition-colors duration-200"
          aria-expanded="false"
          aria-label="Toggle menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="hidden md:hidden pt-4 pb-2 space-y-2">
      <a href={`${getLocalizedPath('/', lang)}#about`} class="block py-2 hover:text-[var(--color-primary)] transition-colors duration-200">
        {t('nav.about')}
      </a>
      <a href={`${getLocalizedPath('/', lang)}#projects`} class="block py-2 hover:text-[var(--color-primary)] transition-colors duration-200">
        {t('nav.projects')}
      </a>
      <a href={`${getLocalizedPath('/', lang)}#experience`} class="block py-2 hover:text-[var(--color-primary)] transition-colors duration-200">
        {t('nav.experience')}
      </a>
      <a href={`${getLocalizedPath('/', lang)}#skills`} class="block py-2 hover:text-[var(--color-primary)] transition-colors duration-200">
        {t('nav.skills')}
      </a>
      <a href={getLocalizedPath('/blog', lang)} class="block py-2 hover:text-[var(--color-primary)] transition-colors duration-200">
        {t('nav.blog')}
      </a>
      <a href={`${getLocalizedPath('/', lang)}#contact`} class="block py-2 hover:text-[var(--color-primary)] transition-colors duration-200">
        {t('nav.contact')}
      </a>
    </div>
  </nav>
</header>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    const isHidden = mobileMenu?.classList.contains('hidden');
    if (isHidden) {
      mobileMenu?.classList.remove('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'true');
    } else {
      mobileMenu?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    }
  });

  // Close mobile menu when clicking on a link
  const mobileLinks = mobileMenu?.querySelectorAll('a');
  mobileLinks?.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    });
  });
</script>
