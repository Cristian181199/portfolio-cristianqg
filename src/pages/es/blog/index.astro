---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getLangFromUrl, useTranslations } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const allPosts = await getCollection('blog', ({ data }) => {
  return data.lang === lang && !data.draft;
});

const sortedPosts = allPosts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<BaseLayout title={`${t('blog.title')} - ${t('hero.name')}`} lang={lang}>
  <div class="container mx-auto px-4 py-12">
    <h1 class="text-5xl font-bold text-center mb-4">{t('blog.title')}</h1>
    
    <div class="max-w-3xl mx-auto mb-12">
      <input
        type="text"
        id="search-input"
        placeholder={t('blog.search')}
        class="w-full px-4 py-3 rounded-lg border border-secondary/20 bg-[var(--bg-primary)] focus:outline-none focus:border-[var(--color-primary)] transition-colors"
      />
    </div>
    
    <div id="blog-posts" class="max-w-4xl mx-auto space-y-8">
      {sortedPosts.length === 0 ? (
        <p class="text-center text-[var(--text-secondary)] text-lg">
          {t('blog.noResults')}
        </p>
      ) : (
        sortedPosts.map((post) => (
          <article class="bg-secondary/5 border border-secondary/10 rounded-lg p-6 hover:border-[var(--color-primary)] transition-all duration-300">
            <a href={`/blog/${post.slug}`}>
              <h2 class="text-3xl font-bold mb-2 hover:text-[var(--color-primary)] transition-colors">
                {post.data.title}
              </h2>
            </a>
            
            <div class="flex items-center space-x-4 text-sm text-[var(--text-secondary)] mb-4">
              <time datetime={post.data.pubDate.toISOString()}>
                {t('blog.publishedOn')} {post.data.pubDate.toLocaleDateString(lang, {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </time>
            </div>
            
            <p class="text-[var(--text-secondary)] mb-4">
              {post.data.description}
            </p>
            
            <div class="flex items-center justify-between">
              <div class="flex flex-wrap gap-2">
                {post.data.tags.map((tag) => (
                  <span class="px-3 py-1 bg-[var(--color-primary)]/10 text-[var(--color-primary)] rounded-full text-sm">
                    {tag}
                  </span>
                ))}
              </div>
              
              <a
                href={`/blog/${post.slug}`}
                class="text-[var(--color-primary)] hover:underline font-medium"
              >
                {t('blog.readMore')} â†’
              </a>
            </div>
          </article>
        ))
      )}
    </div>
  </div>
</BaseLayout>

<script>
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const blogPosts = document.getElementById('blog-posts');
  
  searchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    const articles = blogPosts?.querySelectorAll('article');
    
    articles?.forEach(article => {
      const title = article.querySelector('h2')?.textContent?.toLowerCase() || '';
      const description = article.querySelector('p')?.textContent?.toLowerCase() || '';
      const tags = Array.from(article.querySelectorAll('.px-3'))
        .map(tag => tag.textContent?.toLowerCase() || '')
        .join(' ');
      
      const matches = title.includes(searchTerm) || 
                     description.includes(searchTerm) || 
                     tags.includes(searchTerm);
      
      if (matches) {
        article.classList.remove('hidden');
      } else {
        article.classList.add('hidden');
      }
    });
  });
</script>
